"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateServings = exports.state = exports.removeBookmarks = exports.loadSearchResults = exports.loadRecipe = exports.getSearchResultsPage = exports.addBookmarks = void 0;
var _regeneratorRuntime = require("regenerator-runtime");
var _config = require("./config.js");
var _helpers = require("./helpers.js");
const state = exports.state = {
  recipe: {},
  search: {
    query: '',
    results: [],
    page: 1,
    resultPerPage: _config.RES_PER_PAGE
  },
  bookmarks: []
};
const loadRecipe = async function (id) {
  try {
    const data = await (0, _helpers.getJSON)(`${_config.API_URL}${id}`);
    const {
      recipe
    } = data.data;
    state.recipe = {
      id: recipe.id,
      title: recipe.title,
      publisher: recipe.publisher,
      sourceUrl: recipe.source_url,
      image: recipe.image_url,
      servings: recipe.servings,
      cookingTime: recipe.cooking_time,
      ingredients: recipe.ingredients
    };
    if (state.bookmarks.some(bookmark => bookmark.id === id)) state.recipe.bookmarked = true;else state.recipe.bookmarked = false;
  } catch (err) {
    console.error(err);
    throw err;
  }
};
exports.loadRecipe = loadRecipe;
const loadSearchResults = async function (query) {
  try {
    // Store query in state
    state.search.query = query;
    const data = await (0, _helpers.getJSON)(`${_config.API_URL}?search=${query}`);
    // &key=${KEY}

    // store data in state
    state.search.results = data.data.recipes.map(rec => {
      return {
        id: rec.id,
        title: rec.title,
        publisher: rec.publisher,
        image: rec.image_url
      };
    });
    //Reset page
    state.search.page = 1;
  } catch (err) {
    console.error(err);
    throw err;
  }
};
exports.loadSearchResults = loadSearchResults;
const getSearchResultsPage = function (page = state.search.page) {
  // Keep with page we are
  state.search.page = page;
  const start = (page - 1) * state.search.resultPerPage; //0;
  // Previus page and multiply by how many result i want per page 1- 1 * 10 = 0
  const end = page * state.search.resultPerPage; //9; 1 * 10 = 10

  return state.search.results.slice(start, end);
};
exports.getSearchResultsPage = getSearchResultsPage;
const updateServings = function (newServings) {
  state.recipe.ingredients.forEach(ing => {
    ing.quantity = ing.quantity * newServings / state.recipe.servings;
    // newQt = oldQt * newServings / oldServings // 2 * 8 / 4 = 4
  });

  state.recipe.servings = newServings;
};
exports.updateServings = updateServings;
const addBookmarks = function (recipe) {
  //  Add bookmark
  state.bookmarks.push(recipe);

  //Mark current recipe as bookmark
  if (recipe.id === state.recipe.id) {
    state.recipe.bookmarked = true;
  }
};
exports.addBookmarks = addBookmarks;
const removeBookmarks = function (id) {
  // Remove bookmarks
  const index = state.bookmarks.findIndex(el => el.id === id);
  state.bookmarks.splice(index, 1);

  //Mark current recipe as bookmark
  if (recipe.id === state.recipe.id) {
    state.recipe.bookmarked = true;
  }
};
exports.removeBookmarks = removeBookmarks;